name: CI/CD Pipeline

on:
  push:
    branches: [ release ]
  pull_request:
    branches: [ release ]

env:
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  BACKEND_IMAGE: cis-ops-backend
  FRONTEND_IMAGE: cis-ops-frontend

jobs:
  # Backend Build Job
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Build backend
        run: |
          cd backend
          npm run build --if-present

  # Frontend Build Job
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build
        env:
          REACT_APP_HF_API_KEY: ${{ secrets.REACT_APP_HF_API_KEY }}
          REACT_APP_GOOGLE_CLIENT_ID: ${{ secrets.REACT_APP_GOOGLE_CLIENT_ID }}

  # Docker Build Jobs
  docker-backend:
    needs: build-backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Login to Docker Registry
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_REGISTRY_KEY }}

      - name: Build and Push Backend Docker image
        run: |
          cd backend
          docker build -t ${{ env.DOCKER_REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }} .
          docker push ${{ env.DOCKER_REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}

  docker-frontend:
    needs: build-frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Login to Docker Registry
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_REGISTRY_KEY }}

      - name: Build and Push Frontend Docker image
        run: |
          cd frontend
          docker build --build-arg REACT_APP_HF_API_KEY=${{ secrets.REACT_APP_HF_API_KEY }} \
                       --build-arg REACT_APP_GOOGLE_CLIENT_ID=${{ secrets.REACT_APP_GOOGLE_CLIENT_ID }} \
                       -t ${{ env.DOCKER_REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }} .
          docker push ${{ env.DOCKER_REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}

  # Security Scanning
  trivy-scan-backend:
    needs: docker-backend
    runs-on: ubuntu-latest
    steps:
      - uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}

  trivy-scan-frontend:
    needs: docker-frontend
    runs-on: ubuntu-latest
    steps:
      - uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}

  # Generate Complete Kubernetes Manifest
  generate-k8s-manifest:
    needs: [trivy-scan-backend, trivy-scan-frontend]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Generate Complete Kubernetes Manifest
        run: |
          mkdir -p deployment

          cat <<EOF > deployment/complete-manifest.yaml
          # ==============================================
          # CIS Operations Dashboard - Complete Manifest
          # Generated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          # Commit: ${{ github.sha }}
          # ==============================================

          ---
          apiVersion: v1
          kind: Namespace
          metadata:
            name: cis-ops

          ---
          apiVersion: v1
          kind: Namespace
          metadata:
            name: ingress-nginx

          ---
          # NGINX Ingress Controller Service
          apiVersion: v1
          kind: Service
          metadata:
            name: ingress-nginx
            namespace: ingress-nginx
          spec:
            type: LoadBalancer    # or NodePort for bare-metal
            selector:
              app.kubernetes.io/name: ingress-nginx
            ports:
              - name: http
                port: 80
                targetPort: http
              - name: https
                port: 443
                targetPort: https

          ---
          # NGINX Ingress Controller Deployment (fixed)
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: nginx-ingress-controller
            namespace: ingress-nginx
            labels:
              app.kubernetes.io/name: ingress-nginx
              app.kubernetes.io/part-of: ingress-nginx
              app.kubernetes.io/version: "1.8.2"
          spec:
            replicas: 1
            selector:
              matchLabels:
                app.kubernetes.io/name: ingress-nginx
                app.kubernetes.io/part-of: ingress-nginx
            template:
              metadata:
                labels:
                  app.kubernetes.io/name: ingress-nginx
                  app.kubernetes.io/part-of: ingress-nginx
                annotations:
                  prometheus.io/scrape: "true"
              spec:
                # hostNetwork & nodeSelector removed so pods can schedule anywhere
                serviceAccountName: nginx-ingress-serviceaccount
                tolerations:
                  - effect: NoSchedule
                    key: node-role.kubernetes.io/master
                    operator: Equal
                  - effect: NoSchedule
                    key: node-role.kubernetes.io/control-plane
                    operator: Equal
                containers:
                  - name: controller
                    image: registry.k8s.io/ingress-nginx/controller:v1.8.2@sha256:74834d3d25b336b62cabeb8bf7f1d788706e2cf1cfd64022de4137ade8881ff2
                    args:
                      - /nginx-ingress-controller
                      - --configmap=ingress-nginx/nginx-configuration
                      - --publish-service=ingress-nginx/ingress-nginx
                      - --annotations-prefix=nginx.ingress.kubernetes.io
                    ports:
                      - name: http
                        containerPort: 80
                        protocol: TCP
                      - name: https
                        containerPort: 443
                        protocol: TCP
                    livenessProbe:
                      httpGet:
                        path: /healthz
                        port: 10254
                    readinessProbe:
                      httpGet:
                        path: /healthz
                        port: 10254

          ---
          # IngressClass
          apiVersion: networking.k8s.io/v1
          kind: IngressClass
          metadata:
            name: nginx
            annotations:
              ingressclass.kubernetes.io/is-default-class: "true"
          spec:
            controller: k8s.io/ingress-nginx

          # â€¦ rest of your Namespace, ConfigMaps, RBAC, Deployments, Services, Ingress â€¦
          EOF

      - name: Commit and push manifests
        run: |
          git pull origin release || echo "No changes to pull"
          git add deployment/complete-manifest.yaml
          git commit -m "chore: regen k8s manifest for ${{ github.sha }}" || echo "No changes to commit"
          git push origin HEAD:${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create deployment summary
        run: |
          echo "## ðŸš€ K8s manifest generated" >> $GITHUB_STEP_SUMMARY
          echo "- **Ingress Service**: \`ingress-nginx (LoadBalancer)\`" >> $GITHUB_STEP_SUMMARY
          echo "- **IngressClass**: \`nginx (default)\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Apply with:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "kubectl apply -f deployment/complete-manifest.yaml" >> $GITHUB_STEP_SUMMARY
          echo "kubectl rollout restart deployment/nginx-ingress-controller -n ingress-nginx" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
