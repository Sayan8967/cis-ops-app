name: CI/CD Pipeline

on:
  push:
    branches: [release]
  pull_request:
    branches: [release]

env:
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  BACKEND_IMAGE: cis-ops-backend
  FRONTEND_IMAGE: cis-ops-frontend

jobs:
  # Build and test backend
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci
      - name: Build backend
        working-directory: ./backend
        run: npm run build --if-present

  # Build and test frontend
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
      - name: Build frontend
        working-directory: ./frontend
        run: npm run build
        env:
          REACT_APP_HF_API_KEY: ${{ secrets.REACT_APP_HF_API_KEY }}
          REACT_APP_GOOGLE_CLIENT_ID: ${{ secrets.REACT_APP_GOOGLE_CLIENT_ID }}

  # Build and push backend Docker image
  docker-backend:
    needs: build-backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_KEY }}
      - name: Build and push backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Build and push frontend Docker image
  docker-frontend:
    needs: build-frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_KEY }}
      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest
          build-args: |
            REACT_APP_HF_API_KEY=${{ secrets.REACT_APP_HF_API_KEY }}
            REACT_APP_GOOGLE_CLIENT_ID=${{ secrets.REACT_APP_GOOGLE_CLIENT_ID }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Security scan for backend image
  trivy-scan-backend:
    needs: docker-backend
    runs-on: ubuntu-latest
    steps:
      - name: Run Trivy vulnerability scanner (Backend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-backend-results.sarif'
      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-backend-results.sarif'

  # Security scan for frontend image
  trivy-scan-frontend:
    needs: docker-frontend
    runs-on: ubuntu-latest
    steps:
      - name: Run Trivy vulnerability scanner (Frontend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'
      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-frontend-results.sarif'

  # Generate and commit plain Kubernetes manifests (NO KUSTOMIZE)
  k8s-manifest:
    needs: [trivy-scan-backend, trivy-scan-frontend]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      - name: Create deployment directory
        run: mkdir -p k8s/manifests
      - name: Generate Plain Kubernetes Manifests
        run: |
          # Create namespace
          cat <<EOF > k8s/manifests/namespace.yaml
          apiVersion: v1
          kind: Namespace
          metadata:
            name: cis-ops
            labels:
              name: cis-ops
              app.kubernetes.io/name: cis-ops
              app.kubernetes.io/managed-by: argocd
          EOF

          # Create backend deployment
          cat <<EOF > k8s/manifests/backend-deployment.yaml
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: cis-ops-backend
            namespace: cis-ops
            labels:
              app: cis-ops-backend
              app.kubernetes.io/name: cis-ops
              app.kubernetes.io/component: backend
              app.kubernetes.io/version: latest
              app.kubernetes.io/managed-by: argocd
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: cis-ops-backend
            template:
              metadata:
                labels:
                  app: cis-ops-backend
                  app.kubernetes.io/name: cis-ops
                  app.kubernetes.io/component: backend
                  app.kubernetes.io/version: latest
              spec:
                containers:
                - name: backend
                  image: ${{ env.DOCKER_REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}
                  ports:
                  - containerPort: 4000
                    name: http
                    protocol: TCP
                  env:
                  - name: NODE_ENV
                    value: "production"
                  - name: PORT
                    value: "4000"
                  - name: CORS_ORIGIN
                    value: "*"
                  resources:
                    requests:
                      memory: "128Mi"
                      cpu: "100m"
                    limits:
                      memory: "512Mi"
                      cpu: "500m"
                  livenessProbe:
                    httpGet:
                      path: /api/health
                      port: 4000
                      scheme: HTTP
                    initialDelaySeconds: 60
                    periodSeconds: 30
                    timeoutSeconds: 10
                    failureThreshold: 3
                    successThreshold: 1
                  readinessProbe:
                    httpGet:
                      path: /api/health
                      port: 4000
                      scheme: HTTP
                    initialDelaySeconds: 30
                    periodSeconds: 10
                    timeoutSeconds: 5
                    failureThreshold: 3
                    successThreshold: 1
                  startupProbe:
                    httpGet:
                      path: /api/health
                      port: 4000
                      scheme: HTTP
                    initialDelaySeconds: 10
                    periodSeconds: 5
                    timeoutSeconds: 3
                    failureThreshold: 30
                    successThreshold: 1
          EOF

          # Create frontend deployment
          cat <<EOF > k8s/manifests/frontend-deployment.yaml
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: cis-ops-frontend
            namespace: cis-ops
            labels:
              app: cis-ops-frontend
              app.kubernetes.io/name: cis-ops
              app.kubernetes.io/component: frontend
              app.kubernetes.io/version: ${{ github.sha }}
              app.kubernetes.io/managed-by: argocd
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: cis-ops-frontend
            template:
              metadata:
                labels:
                  app: cis-ops-frontend
                  app.kubernetes.io/name: cis-ops
                  app.kubernetes.io/component: frontend
                  app.kubernetes.io/version: ${{ github.sha }}
              spec:
                containers:
                - name: frontend
                  image: ${{ env.DOCKER_REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
                  ports:
                  - containerPort: 80
                    name: http
                    protocol: TCP
                  resources:
                    requests:
                      memory: "64Mi"
                      cpu: "50m"
                    limits:
                      memory: "256Mi"
                      cpu: "200m"
                  livenessProbe:
                    httpGet:
                      path: /
                      port: 80
                      scheme: HTTP
                    initialDelaySeconds: 30
                    periodSeconds: 10
                    timeoutSeconds: 5
                    failureThreshold: 3
                    successThreshold: 1
                  readinessProbe:
                    httpGet:
                      path: /
                      port: 80
                      scheme: HTTP
                    initialDelaySeconds: 5
                    periodSeconds: 5
                    timeoutSeconds: 3
                    failureThreshold: 3
                    successThreshold: 1
          EOF

          # Create backend service
          cat <<EOF > k8s/manifests/backend-service.yaml
          apiVersion: v1
          kind: Service
          metadata:
            name: cis-ops-backend-service
            namespace: cis-ops
            labels:
              app: cis-ops-backend
              app.kubernetes.io/name: cis-ops
              app.kubernetes.io/component: backend
              app.kubernetes.io/managed-by: argocd
          spec:
            selector:
              app: cis-ops-backend
            ports:
            - name: http
              port: 4000
              targetPort: 4000
              protocol: TCP
            type: ClusterIP
          EOF

          # Create frontend service
          cat <<EOF > k8s/manifests/frontend-service.yaml
          apiVersion: v1
          kind: Service
          metadata:
            name: cis-ops-frontend-service
            namespace: cis-ops
            labels:
              app: cis-ops-frontend
              app.kubernetes.io/name: cis-ops
              app.kubernetes.io/component: frontend
              app.kubernetes.io/managed-by: argocd
          spec:
            selector:
              app: cis-ops-frontend
            ports:
            - name: http
              port: 80
              targetPort: 80
              protocol: TCP
            type: ClusterIP
          EOF

          # Create ingress
          cat <<EOF > k8s/manifests/ingress.yaml
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: cis-ops-ingress
            namespace: cis-ops
            labels:
              app.kubernetes.io/name: cis-ops
              app.kubernetes.io/managed-by: argocd
            annotations:
              kubernetes.io/ingress.class: nginx
              nginx.ingress.kubernetes.io/rewrite-target: /$2
              nginx.ingress.kubernetes.io/use-regex: "true"
              nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
              nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
              nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
              nginx.ingress.kubernetes.io/proxy-body-size: "10m"
              nginx.ingress.kubernetes.io/proxy-http-version: "1.1"
              nginx.ingress.kubernetes.io/configuration-snippet: |
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
              nginx.ingress.kubernetes.io/enable-cors: "true"
              nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
              nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
          spec:
            ingressClassName: nginx
            rules:
            - http:
                paths:
                - path: /api(/|$)(.*)
                  pathType: ImplementationSpecific
                  backend:
                    service:
                      name: cis-ops-backend-service
                      port:
                        number: 4000
                - path: /socket.io(/|$)(.*)
                  pathType: ImplementationSpecific
                  backend:
                    service:
                      name: cis-ops-backend-service
                      port:
                        number: 4000
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: cis-ops-frontend-service
                      port:
                        number: 80
          EOF

          # Create validation script
          cat <<EOF > k8s/manifests/validate.sh
          #!/bin/bash

          echo "🔍 Validating CIS-OPS Deployment..."

          # Check namespace
          echo "Checking namespace..."
          kubectl get namespace cis-ops

          # Check deployments
          echo "Checking deployments..."
          kubectl get deployments -n cis-ops

          # Check pods
          echo "Checking pods..."
          kubectl get pods -n cis-ops

          # Check services
          echo "Checking services..."
          kubectl get services -n cis-ops

          # Check ingress
          echo "Checking ingress..."
          kubectl get ingress -n cis-ops

          # Check ingress controller
          echo "Checking ingress controller..."
          kubectl get pods -n ingress-nginx

          # Test health endpoints
          echo "Testing application health..."

          # Get ingress IP
          INGRESS_IP=$(kubectl get svc -n ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "localhost")

          if [ "$INGRESS_IP" != "localhost" ]; then
            echo "Testing backend health..."
            curl -f http://$INGRESS_IP/api/health || echo "Backend health check failed"

            echo "Testing frontend..."
            curl -f http://$INGRESS_IP/ || echo "Frontend check failed"
          else
            echo "⚠️  No external IP found, skipping HTTP tests"
          fi

          echo "✅ Validation completed!"
          EOF

          chmod +x k8s/manifests/validate.sh

          # Create ArgoCD Application
          cat <<EOF > k8s/argocd-application.yaml
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: cis-ops
            namespace: argocd
            finalizers:
            - resources-finalizer.argocd.argoproj.io
          spec:
            project: default
            source:
              repoURL: ${{ github.server_url }}/${{ github.repository }}
              targetRevision: ${{ github.ref_name }}
              path: k8s/manifests
            destination:
              server: https://kubernetes.default.svc
              namespace: cis-ops
            syncPolicy:
              automated:
                prune: true
                selfHeal: true
                allowEmpty: false
              syncOptions:
              - CreateNamespace=true
              - PrunePropagationPolicy=foreground
              - PruneLast=true
              retry:
                limit: 5
                backoff:
                  duration: 5s
                  factor: 2
                  maxDuration: 3m
          EOF
      - name: Commit and push manifests
        run: |
          git add k8s/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "🚀 Update Kubernetes manifests (NO KUSTOMIZE) for commit ${{ github.sha }}

            Backend Image: ${{ env.DOCKER_REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}
            Frontend Image: ${{ env.DOCKER_REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}

            Changes:
            - Plain Kubernetes manifests (removed kustomize)
            - Direct image tags with commit SHA
            - Enhanced ingress configuration
            - Improved health checks and resource limits
            - Added validation script

            Auto-generated by GitHub Actions"
            git push origin HEAD:${{ github.ref_name }}
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create deployment summary
        run: |
          echo "## 🚀 Deployment Summary (No Kustomize)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Docker Images Built:" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend**: \`${{ env.DOCKER_REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend**: \`${{ env.DOCKER_REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Kubernetes Manifests:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Generated plain YAML manifests in \`k8s/manifests/\`" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ No kustomize required - direct Kubernetes YAML" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Image tags updated with commit SHA" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Enhanced ingress with WebSocket support" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ ArgoCD Application manifest created" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Validation script included" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### File Structure:" >> $GITHUB_STEP_SUMMARY
          echo "- \`k8s/manifests/namespace.yaml\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`k8s/manifests/backend-deployment.yaml\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`k8s/manifests/frontend-deployment.yaml\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`k8s/manifests/backend-service.yaml\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`k8s/manifests/frontend-service.yaml\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`k8s/manifests/ingress.yaml\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`k8s/manifests/validate.sh\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`k8s/argocd-application.yaml\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. 🔧 Install NGINX Ingress Controller manually first" >> $GITHUB_STEP_SUMMARY
          echo "2. 🔄 Create ArgoCD application pointing to \`k8s/manifests\`" >> $GITHUB_STEP_SUMMARY
          echo "3. 🔍 Monitor deployment in ArgoCD UI" >> $GITHUB_STEP_SUMMARY
          echo "4. ✅ Run validation: \`./k8s/manifests/validate.sh\`" >> $GITHUB_STEP_SUMMARY