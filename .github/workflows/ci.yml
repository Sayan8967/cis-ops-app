# .github/workflows/ci.yml - Improved CI/CD Pipeline
name: CI/CD Pipeline with Database

on:
  push:
    branches: [releaseV2, main]
  pull_request:
    branches: [releaseV2, main]

env:
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  BACKEND_IMAGE: cis-ops-backend
  FRONTEND_IMAGE: cis-ops-frontend

jobs:
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Build backend
        working-directory: ./backend
        run: |
          npm ci
          npm run build --if-present

      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_KEY }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest
            ${{ env.DOCKER_REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Build frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm run build
        env:
          REACT_APP_HF_API_KEY: ${{ secrets.REACT_APP_HF_API_KEY }}
          REACT_APP_GOOGLE_CLIENT_ID: ${{ secrets.REACT_APP_GOOGLE_CLIENT_ID }}
          REACT_APP_BACKEND_URL: http://localhost:30400
          CI: false

      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_KEY }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest
            ${{ env.DOCKER_REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
          build-args: |
            REACT_APP_HF_API_KEY=${{ secrets.REACT_APP_HF_API_KEY }}
            REACT_APP_GOOGLE_CLIENT_ID=${{ secrets.REACT_APP_GOOGLE_CLIENT_ID }}
            REACT_APP_BACKEND_URL=http://mydevopsproject.live:30400
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan-backend:
    needs: build-backend
    runs-on: ubuntu-latest
    steps:
      - name: Run Trivy vulnerability scanner (Backend)
        uses: aquasecurity/trivy-action@0.15.0
        with:
          image-ref: '${{ env.DOCKER_REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-backend-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'
        env:
          TRIVY_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          TRIVY_PASSWORD: ${{ secrets.DOCKER_REGISTRY_KEY }}

      - name: Upload Trivy scan results (Backend)
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-backend-results.sarif'

  security-scan-frontend:
    needs: build-frontend
    runs-on: ubuntu-latest
    steps:
      - name: Run Trivy vulnerability scanner (Frontend)
        uses: aquasecurity/trivy-action@0.15.0
        with:
          image-ref: '${{ env.DOCKER_REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'
        env:
          TRIVY_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          TRIVY_PASSWORD: ${{ secrets.DOCKER_REGISTRY_KEY }}

      - name: Upload Trivy scan results (Frontend)
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-frontend-results.sarif'

  deploy:
    needs: [security-scan-backend, security-scan-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/releaseV2' || github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Update Kubernetes manifests with Database Support
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          mkdir -p k8s/manifests

          # Set variables for substitution
          DOCKER_REGISTRY="${{ env.DOCKER_REGISTRY }}"
          BACKEND_IMAGE="${{ env.BACKEND_IMAGE }}"
          FRONTEND_IMAGE="${{ env.FRONTEND_IMAGE }}"
          COMMIT_SHA="${{ github.sha }}"
          
          echo "Deploying with:"
          echo "Registry: $DOCKER_REGISTRY"
          echo "Backend: $BACKEND_IMAGE"
          echo "Frontend: $FRONTEND_IMAGE"
          echo "Commit: $COMMIT_SHA"

          # Namespace
          cat > k8s/manifests/namespace.yaml << 'EOF'
          apiVersion: v1
          kind: Namespace
          metadata:
            name: cis-ops
            labels:
              name: cis-ops
              app.kubernetes.io/name: cis-ops
          EOF

          # PostgreSQL PersistentVolume (ADDED - Important for data persistence)
          cat > k8s/manifests/postgres-pv.yaml << 'EOF'
          apiVersion: v1
          kind: PersistentVolume
          metadata:
            name: postgres-pv
            namespace: cis-ops
          spec:
            capacity:
              storage: 5Gi
            accessModes:
              - ReadWriteOnce
            persistentVolumeReclaimPolicy: Retain
            storageClassName: local-storage
            hostPath:
              path: /tmp/postgres-data
          ---
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: postgres-pvc
            namespace: cis-ops
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 5Gi
            storageClassName: local-storage
          EOF

          # PostgreSQL Deployment (IMPROVED - with persistent storage)
          cat > k8s/manifests/postgres-deployment.yaml << 'EOF'
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: postgres
            namespace: cis-ops
            labels:
              app: postgres
          spec:
            replicas: 1
            strategy:
              type: Recreate  # Important for databases with persistent storage
            selector:
              matchLabels:
                app: postgres
            template:
              metadata:
                labels:
                  app: postgres
              spec:
                containers:
                - name: postgres
                  image: postgres:15-alpine
                  env:
                  - name: POSTGRES_DB
                    value: "cisops"
                  - name: POSTGRES_USER
                    value: "cisops"
                  - name: POSTGRES_PASSWORD
                    value: "cisops123"
                  - name: PGDATA
                    value: /var/lib/postgresql/data/pgdata
                  ports:
                  - containerPort: 5432
                  volumeMounts:
                  - name: postgres-storage
                    mountPath: /var/lib/postgresql/data
                  resources:
                    requests:
                      memory: "256Mi"
                      cpu: "200m"
                    limits:
                      memory: "1Gi"  # Increased for better performance
                      cpu: "500m"
                  livenessProbe:
                    exec:
                      command:
                      - pg_isready
                      - -U
                      - cisops
                      - -d
                      - cisops
                    initialDelaySeconds: 30
                    periodSeconds: 10
                    timeoutSeconds: 5
                    failureThreshold: 3
                  readinessProbe:
                    exec:
                      command:
                      - pg_isready
                      - -U
                      - cisops
                      - -d
                      - cisops
                    initialDelaySeconds: 5
                    periodSeconds: 5
                    timeoutSeconds: 3
                    failureThreshold: 3
                volumes:
                - name: postgres-storage
                  persistentVolumeClaim:
                    claimName: postgres-pvc
          EOF

          # PostgreSQL Service
          cat > k8s/manifests/postgres-service.yaml << 'EOF'
          apiVersion: v1
          kind: Service
          metadata:
            name: postgres-service
            namespace: cis-ops
            labels:
              app: postgres
          spec:
            selector:
              app: postgres
            ports:
            - port: 5432
              targetPort: 5432
            type: ClusterIP
          EOF

          # Backend ConfigMap for better configuration management
          cat > k8s/manifests/backend-configmap.yaml << 'EOF'
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: backend-config
            namespace: cis-ops
          data:
            NODE_ENV: "production"
            PORT: "4000"
            DB_HOST: "postgres-service"
            DB_PORT: "5432"
            DB_NAME: "cisops"
            DB_USER: "cisops"
          EOF

          # Backend Secret for sensitive data
          cat > k8s/manifests/backend-secret.yaml << 'EOF'
          apiVersion: v1
          kind: Secret
          metadata:
            name: backend-secret
            namespace: cis-ops
          type: Opaque
          data:
            # Base64 encoded "cisops123"
            DB_PASSWORD: Y2lzb3BzMTIz
          EOF

          # Backend Deployment (IMPROVED - with proper health checks and dependencies)
          cat > k8s/manifests/backend-deployment.yaml << EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: cis-ops-backend
            namespace: cis-ops
            labels:
              app: cis-ops-backend
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: cis-ops-backend
            template:
              metadata:
                labels:
                  app: cis-ops-backend
              spec:
                initContainers:
                - name: wait-for-postgres
                  image: postgres:15-alpine
                  command: 
                  - sh
                  - -c
                  - |
                    until pg_isready -h postgres-service -p 5432 -U cisops; do
                      echo "Waiting for PostgreSQL..."
                      sleep 2
                    done
                    echo "PostgreSQL is ready!"
                containers:
                - name: backend
                  image: ${DOCKER_REGISTRY}/${BACKEND_IMAGE}:${COMMIT_SHA}
                  ports:
                  - containerPort: 4000
                    name: http
                  envFrom:
                  - configMapRef:
                      name: backend-config
                  - secretRef:
                      name: backend-secret
                  resources:
                    requests:
                      memory: "256Mi"
                      cpu: "200m"
                    limits:
                      memory: "1Gi"
                      cpu: "1000m"
                  livenessProbe:
                    httpGet:
                      path: /api/health
                      port: 4000
                    initialDelaySeconds: 60  # Increased for DB initialization
                    periodSeconds: 10
                    timeoutSeconds: 5
                    failureThreshold: 3
                  readinessProbe:
                    httpGet:
                      path: /api/health
                      port: 4000
                    initialDelaySeconds: 30
                    periodSeconds: 5
                    timeoutSeconds: 3
                    failureThreshold: 3
                  startupProbe:  # Added startup probe for slow initialization
                    httpGet:
                      path: /api/health
                      port: 4000
                    initialDelaySeconds: 10
                    periodSeconds: 10
                    timeoutSeconds: 5
                    failureThreshold: 30
          EOF

          # Frontend Deployment (IMPROVED - with better health checks)
          cat > k8s/manifests/frontend-deployment.yaml << EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: cis-ops-frontend
            namespace: cis-ops
            labels:
              app: cis-ops-frontend
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: cis-ops-frontend
            template:
              metadata:
                labels:
                  app: cis-ops-frontend
              spec:
                containers:
                - name: frontend
                  image: ${DOCKER_REGISTRY}/${FRONTEND_IMAGE}:${COMMIT_SHA}
                  ports:
                  - containerPort: 80
                    name: http
                  env:
                  - name: REACT_APP_BACKEND_URL
                    value: "http://mydevopsproject.live:30400"
                  resources:
                    requests:
                      memory: "128Mi"
                      cpu: "100m"
                    limits:
                      memory: "512Mi"
                      cpu: "500m"
                  livenessProbe:
                    httpGet:
                      path: /health
                      port: 80
                    initialDelaySeconds: 30
                    periodSeconds: 10
                    timeoutSeconds: 3
                    failureThreshold: 3
                  readinessProbe:
                    httpGet:
                      path: /health
                      port: 80
                    initialDelaySeconds: 10
                    periodSeconds: 5
                    timeoutSeconds: 3
                    failureThreshold: 3
                  startupProbe:
                    httpGet:
                      path: /health
                      port: 80
                    initialDelaySeconds: 5
                    periodSeconds: 5
                    timeoutSeconds: 3
                    failureThreshold: 6
          EOF

          # Backend Service
          cat > k8s/manifests/backend-service.yaml << 'EOF'
          apiVersion: v1
          kind: Service
          metadata:
            name: cis-ops-backend-service
            namespace: cis-ops
            labels:
              app: cis-ops-backend
          spec:
            type: NodePort
            selector:
              app: cis-ops-backend
            ports:
            - port: 4000
              targetPort: 4000
              nodePort: 30400
              name: http
          EOF

          # Frontend Service
          cat > k8s/manifests/frontend-service.yaml << 'EOF'
          apiVersion: v1
          kind: Service
          metadata:
            name: cis-ops-frontend-service
            namespace: cis-ops
            labels:
              app: cis-ops-frontend
          spec:
            type: NodePort
            selector:
              app: cis-ops-frontend
            ports:
            - port: 80
              targetPort: 80
              nodePort: 30080
              name: http
          EOF

          # ArgoCD Application
          cat > k8s/argocd-application.yaml << EOF
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: cis-ops
            namespace: argocd
          spec:
            project: default
            source:
              repoURL: ${{ github.server_url }}/${{ github.repository }}
              targetRevision: ${{ github.ref_name }}
              path: k8s/manifests
            destination:
              server: https://kubernetes.default.svc
              namespace: cis-ops
            syncPolicy:
              automated:
                prune: true
                selfHeal: true
              syncOptions:
              - CreateNamespace=true
              - RespectIgnoreDifferences=true
          EOF

          # Verify generated manifests
          echo "=== Generated Backend Deployment ==="
          head -20 k8s/manifests/backend-deployment.yaml
          echo "=== Generated Frontend Deployment ==="
          head -20 k8s/manifests/frontend-deployment.yaml

      - name: Commit and push changes
        run: |
          git add k8s/
          if ! git diff --staged --quiet; then
            git commit -m "Deploy ${{ github.sha }} - Enhanced K8s Configuration"
            git push origin ${{ github.ref_name }}
          fi

      - name: Deployment summary
        run: |
          echo "## 🚀 Deployment Complete with Enhanced Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend**: \`${{ env.DOCKER_REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend**: \`${{ env.DOCKER_REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Database**: PostgreSQL 15-alpine with persistent storage" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 Application URLs:" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend**: http://mydevopsproject.live:30080" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend API**: http://mydevopsproject.live:30400" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Check**: http://mydevopsproject.live:30400/health" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✨ Enhanced Features:" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 Init containers for proper startup sequence" >> $GITHUB_STEP_SUMMARY
          echo "- 💾 Persistent database storage" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 Comprehensive health checks (startup, liveness, readiness)" >> $GITHUB_STEP_SUMMARY
          echo "- 🔧 ConfigMaps and Secrets for better configuration management" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 Improved resource limits and requests" >> $GITHUB_STEP_SUMMARY