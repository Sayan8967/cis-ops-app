# frontend/nginx.conf - Fixed nginx configuration with proper log_format placement
server {
    listen 80;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html index.htm;

    # Enable gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/x-javascript
        application/xml+rss
        application/javascript
        application/json;

    # CRITICAL: Health check endpoint must come FIRST
    location = /health {
        access_log off;
        add_header Content-Type "text/plain";
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        return 200 "healthy\n";
    }

    # Backup health check file
    location = /health.txt {
        access_log off;
        try_files /health.txt =404;
        add_header Content-Type "text/plain";
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }

    # Enhanced security headers with Google OAuth compatibility
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Fixed CSP for Google OAuth - allow backend connections
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' *.google.com *.googleapis.com *.gstatic.com; style-src 'self' 'unsafe-inline' *.googleapis.com *.gstatic.com; img-src 'self' data: https:; connect-src 'self' http: https: *.googleapis.com *.google.com mydevopsproject.live:*; frame-src 'self' *.google.com *.googleapis.com; font-src 'self' *.googleapis.com *.gstatic.com;" always;
    
    # Remove Cross-Origin-Opener-Policy for HTTP domains (causes issues with non-HTTPS)
    # add_header Cross-Origin-Opener-Policy "same-origin-allow-popups" always;
    add_header Cross-Origin-Embedder-Policy "unsafe-none" always;

    # CORS headers - more specific and secure
    add_header Access-Control-Allow-Origin "*" always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
    add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With, Cache-Control" always;
    add_header Access-Control-Max-Age "86400" always;

    # Handle preflight OPTIONS requests FIRST
    location ~* ^/(api|auth)/ {
        if ($request_method = OPTIONS) {
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With, Cache-Control";
            add_header Access-Control-Max-Age "86400";
            add_header Content-Length "0";
            add_header Content-Type "text/plain";
            return 204;
        }
        
        # Proxy to backend with CORS headers
        proxy_pass http://cis-ops-backend-service:4000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Add CORS headers for proxied requests
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
    }

    # Static assets with long cache and CORS
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        add_header Access-Control-Allow-Origin "*";
        add_header Access-Control-Allow-Methods "GET, OPTIONS";
    }

    # Runtime environment configuration
    location = /runtime-env.js {
        expires -1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Content-Type "application/javascript";
        add_header Access-Control-Allow-Origin "*";
    }

    # Handle client-side routing for React (must come after specific locations)
    location / {
        try_files $uri $uri/ /index.html;
        
        # Prevent caching of index.html
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
        
        # Security headers for main content (without problematic COOP header)
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        # add_header Cross-Origin-Opener-Policy "same-origin-allow-popups" always;
    }

    # Global OPTIONS handling for other requests
    location ~* ^.+$ {
        if ($request_method = OPTIONS) {
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With";
            add_header Access-Control-Max-Age "86400";
            add_header Content-Length "0";
            add_header Content-Type "text/plain";
            return 204;
        }
    }

    # Error pages
    error_page 404 /index.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }

    # Simple access and error logging (removed custom log_format)
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log warn;
}